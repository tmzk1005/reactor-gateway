/*
 * Copyright 2023 zoukang, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'pmd'
    id 'io.github.tmzk1005.java-formatter'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

checkstyle {
    configFile = rootProject.file('qa/checkstyle/checkstyle.xml')
}

pmd {
    consoleOutput = true
    toolVersion = "6.55.0"
    ruleSets = []
    ruleSetFiles = files(rootProject.file('qa/pmd/pmd-java-rules.xml'))
}

formatter {
    importOrder = ["java", "javax", "", "zk.rgw", "#"]
}

def lombokVersion = "1.18.28"
def jacksonVersion = "2.15.2"
def reactorVersion = "2023.0.4"
def reactorNettyVersion = "1.1.17"
def slf4jApiVersion = "2.0.9"
def log4j2Version = "2.20.0"
def picocliVersion = "4.7.5"
def junitJupiterVersion = "5.10.0"
def jwtLibVersion = "4.4.0"
def mongodbReactiveDriverVersion = "4.10.2"
def jsonSchemaVersion = "1.0.86"
def kafkaVersion = "3.5.1"
def protobufVersion = "3.24.3"
def grpcVersion = "1.58.0"
def groovyVersion = "4.0.14"

dependencies {
    implementation platform("org.projectlombok:lombok:${lombokVersion}")
    implementation platform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
    implementation platform("io.projectreactor:reactor-bom:${reactorVersion}")
    implementation platform("io.projectreactor.netty:reactor-netty-http:${reactorNettyVersion}")
    implementation platform("org.slf4j:slf4j-api:${slf4jApiVersion}")
    implementation platform("org.apache.logging.log4j:log4j-bom:${log4j2Version}")
    implementation platform("info.picocli:picocli:${picocliVersion}")
    implementation platform("com.auth0:java-jwt:${jwtLibVersion}")
    implementation platform("org.mongodb:mongodb-driver-reactivestreams:${mongodbReactiveDriverVersion}")
    implementation platform("org.mongodb:bson-record-codec:${mongodbReactiveDriverVersion}")
    implementation platform("com.networknt:json-schema-validator:${jsonSchemaVersion}")
    implementation platform("com.google.protobuf:protobuf-bom:${protobufVersion}")
    implementation platform("io.grpc:grpc-bom:${grpcVersion}")
    implementation platform("org.apache.groovy:groovy-bom:${groovyVersion}")

    constraints {
        // noinspection ForeignDelegate
        implementation "org.apache.kafka:kafka-clients:${kafkaVersion}"
    }

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    testImplementation "io.projectreactor:reactor-test"

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "info.picocli:picocli-codegen:${picocliVersion}"

    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

tasks.named('test', Test) {
    useJUnitPlatform()
    maxHeapSize = '1G'

    testLogging {
        events "passed", "failed", "skipped", "standardOut", "standardError"
        exceptionFormat "short"
        showCauses true
    }
}
