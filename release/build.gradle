/*
 * Copyright 2023 zoukang, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Files

def createJarNameListForProject(String projectName) {
    def theProject = project(":${projectName}")
    def jarFileNames = []
    jarFileNames.add(theProject.jar.archiveFileName.get())
    for (jarFile in theProject.configurations.runtimeClasspath) {
        jarFileNames.add(jarFile.getName())
    }
    Files.writeString(project.file("conf/.${projectName}.classpath").toPath(), String.join('\n', jarFileNames))
}

tasks.register("tgz", Tar) {
    dependsOn project(":gateway").tasks.named("build")
    dependsOn project(":dashboard").tasks.named("build")
    dependsOn project(":access-log-consumer").tasks.named("build")

    def uiProject = rootProject.findProject(":reactor-gateway-ui")
    if (uiProject != null && !uiProject.file("dist").exists()) {
        dependsOn uiProject.tasks.named("build")
    }

    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    doFirst {
        createJarNameListForProject("gateway")
        createJarNameListForProject("dashboard")
        createJarNameListForProject("access-log-consumer")
    }

    def releaseName = "${rootProject.name}-${rootProject.version}"

    destinationDirectory = project.buildDir
    archiveFileName = "${releaseName}.tgz"
    compression = Compression.GZIP

    into releaseName
    from { 'bin' } { into 'bin/' fileMode 0755 }
    from { 'conf' } { into 'conf/' fileMode 0644 }

    if (uiProject != null) {
        from { uiProject.file("dist") } { into 'static/' fileMode 0644 }
    }

    from {
        [
                project(":gateway").configurations.runtimeClasspath,
                project(":gateway").jar,
                project(":dashboard").configurations.runtimeClasspath,
                project(":dashboard").jar,
                project(":access-log-consumer").configurations.runtimeClasspath,
                project(":access-log-consumer").jar
        ]
    } { into "libs/" fileMode 0644 }

    from { rootProject.file('LICENSE') } { into '' fileMode 0644 }

    doLast {
        delete "conf/.gateway.classpath"
        delete "conf/.dashboard.classpath"
        delete "conf/.access-log-consumer.classpath"
    }
}

tasks.register('clean') {
    doLast {
        delete "build"
    }
}

tasks.register("build-docker-image-openjdk17") {
    onlyIf { org.gradle.internal.os.OperatingSystem.current().isLinux() }

    doLast {
        exec {
            workingDir "docker/debian-openjdk17"
            commandLine "bash", "build.sh"
        }
    }
}

tasks.register("build-docker-image-kafka") {
    onlyIf { org.gradle.internal.os.OperatingSystem.current().isLinux() }

    dependsOn("build-docker-image-openjdk17")

    doLast {
        exec {
            workingDir "docker/debian-kafka"
            commandLine "bash", "build.sh", "${rootProject.version}"
        }
    }
}

tasks.register("build-docker-image-mongodb") {
    onlyIf { org.gradle.internal.os.OperatingSystem.current().isLinux() }

    doLast {
        exec {
            workingDir "docker/debian-mongodb"
            commandLine "bash", "build.sh", "${rootProject.version}"
        }
    }
}

tasks.register("build-docker-image-rgw") {
    onlyIf { org.gradle.internal.os.OperatingSystem.current().isLinux() }

    dependsOn("tgz")
    dependsOn("build-docker-image-openjdk17")

    doLast {
        copy {
            from "build/reactor-gateway-${rootProject.version}.tgz"
            into "docker/debian-rgw/"
        }
        exec {
            workingDir "docker/debian-rgw"
            commandLine "bash", "build.sh", "${rootProject.version}"
        }
        delete "docker/debian-rgw/reactor-gateway-${rootProject.version}.tgz"
    }
}

tasks.register("docker-compose-up") {
    onlyIf { org.gradle.internal.os.OperatingSystem.current().isLinux() }

    dependsOn("build-docker-image-kafka")
    dependsOn("build-docker-image-mongodb")
    dependsOn("build-docker-image-rgw")

    doLast {
        exec {
            workingDir "docker/rgw-compose"
            environment("PROJECT_VERSION", "${rootProject.version}")
            environment("COMPOSE_PROJECT_NAME", "rgw-compose")
            commandLine "docker-compose", "up"
        }
    }
}

tasks.register("docker-compose-down") {
    onlyIf { org.gradle.internal.os.OperatingSystem.current().isLinux() }

    doLast {
        exec {
            workingDir "docker/rgw-compose"
            environment("PROJECT_VERSION", "${rootProject.version}")
            environment("COMPOSE_PROJECT_NAME", "rgw-compose")
            commandLine "docker-compose", "down"
        }
    }
}